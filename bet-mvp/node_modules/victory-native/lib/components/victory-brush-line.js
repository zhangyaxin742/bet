"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryBrushLine = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeSvg = require("react-native-svg");

var _es = require("victory-brush-line/es");

var _lineSegment = require("./victory-primitives/line-segment");

var _nativeHelpers = _interopRequireDefault(require("../helpers/native-helpers"));

var _wrapCoreComponent = require("../helpers/wrap-core-component");

var _excluded = ["style"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var RectWithStyle = function (_ref) {
  var _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Rect, _extends({}, otherProps, _nativeHelpers.default.getStyle(style)));
};

var yes = function () {
  return true;
};

var no = function () {
  return false;
};

var vblDefaultEvents = _es.VictoryBrushLine.defaultEvents;

var VictoryNativeBrushLine = /*#__PURE__*/function (_VictoryBrushLineBase) {
  _inherits(VictoryNativeBrushLine, _VictoryBrushLineBase);

  var _super = _createSuper(VictoryNativeBrushLine);

  function VictoryNativeBrushLine(_props) {
    var _this;

    _classCallCheck(this, VictoryNativeBrushLine);

    _this = _super.call(this, _props);

    _this.defaultEvents = function (props) {
      var _vblDefaultEvents;

      if (props.disable) return undefined; // refer to web victory brush line to see the events we're aliasing here
      // we're just remapping the existing default events to their mobile equivalent handlers

      var existingEventHandlers = (_vblDefaultEvents = vblDefaultEvents(props)) === null || _vblDefaultEvents === void 0 ? void 0 : _vblDefaultEvents[0].eventHandlers;
      return [{
        target: props.type,
        eventHandlers: {
          onTouchStart: existingEventHandlers === null || existingEventHandlers === void 0 ? void 0 : existingEventHandlers.onMouseDown,
          onTouchMove: existingEventHandlers === null || existingEventHandlers === void 0 ? void 0 : existingEventHandlers.onMouseMove,
          onTouchEnd: existingEventHandlers === null || existingEventHandlers === void 0 ? void 0 : existingEventHandlers.onMouseUp
        }
      }];
    };

    _this.panResponder = void 0;
    _this.panResponder = _this.getResponder();
    return _this;
  } // mimics victory-container responders, except for comment below


  _createClass(VictoryNativeBrushLine, [{
    key: "getResponder",
    value: function getResponder() {
      var shouldBlockNativeResponder = no;

      if (this.props && (this.props.allowDrag || this.props.allowDraw || this.props.allowResize)) {
        shouldBlockNativeResponder = yes;
      }

      return _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: yes,
        onStartShouldSetPanResponderCapture: no,
        onMoveShouldSetPanResponder: yes,
        onMoveShouldSetPanResponderCapture: yes,
        onShouldBlockNativeResponder: shouldBlockNativeResponder,
        // prevent parent responder (the VictoryContainer) from stealing touches
        onPanResponderTerminationRequest: no,
        onPanResponderGrant: this.handleResponderGrant.bind(this),
        onPanResponderMove: this.handleResponderMove.bind(this),
        onPanResponderRelease: this.handleResponderEnd.bind(this),
        onPanResponderTerminate: this.handleResponderEnd.bind(this)
      });
    }
  }, {
    key: "callOptionalEventCallback",
    value: function callOptionalEventCallback(eventName, evt) {
      var callback = (0, _get2.default)(this.props.events, eventName);

      if (callback) {
        evt.persist(); // RN nativeEvent is reused. see https://fb.me/react-event-pooling

        callback(evt, this.props, "__unknownEventKey__", eventName);
      }
    }
  }, {
    key: "handleResponderGrant",
    value: function handleResponderGrant(evt) {
      if (this.props.onTouchStart) {
        this.props.onTouchStart(evt);
      }

      this.callOptionalEventCallback("onTouchStart", evt);
    }
  }, {
    key: "handleResponderMove",
    value: function handleResponderMove(evt) {
      var touches = evt.nativeEvent.touches;

      if (touches && touches.length === 2) {
        this.callOptionalEventCallback("onTouchPinch", evt);
      } else {
        this.callOptionalEventCallback("onTouchMove", evt);
      }
    }
  }, {
    key: "handleResponderEnd",
    value: function handleResponderEnd(evt) {
      if (this.props.onTouchEnd) {
        this.props.onTouchEnd(evt);
      }

      this.callOptionalEventCallback("onTouchEnd", evt);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.G, _extends({}, this.props.events, this.panResponder.panHandlers), this.renderLine(this.props), this.renderBrushArea(this.props), this.renderBrush(this.props), this.renderHandles(this.props));
    }
  }]);

  return VictoryNativeBrushLine;
}(_es.VictoryBrushLine);

VictoryNativeBrushLine.displayName = "VictoryNativeBrushLine";
var VictoryBrushLine = (0, _wrapCoreComponent.wrapCoreComponent)({
  Component: VictoryNativeBrushLine,
  defaultProps: _objectSpread(_objectSpread({}, VictoryNativeBrushLine.defaultProps), {}, {
    brushComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null),
    brushAreaComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null),
    handleComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null),
    groupComponent: /*#__PURE__*/_react.default.createElement(_reactNativeSvg.G, null),
    lineComponent: /*#__PURE__*/_react.default.createElement(_lineSegment.LineSegment, null)
  })
});
exports.VictoryBrushLine = VictoryBrushLine;