"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryContainer = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _reactNativeSvg = _interopRequireWildcard(require("react-native-svg"));

var _reactNative = require("react-native");

var _es = require("victory-core/es");

var _nativeHelpers = _interopRequireDefault(require("../helpers/native-helpers"));

var _portal = require("./victory-portal/portal");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var yes = function () {
  return true;
};

var no = function () {
  return false;
};

var VictoryContainer = /*#__PURE__*/function (_VictoryContainerBase) {
  _inherits(VictoryContainer, _VictoryContainerBase);

  var _super = _createSuper(VictoryContainer);

  function VictoryContainer(props) {
    var _this;

    _classCallCheck(this, VictoryContainer);

    _this = _super.call(this, props);
    _this.panResponder = void 0;
    _this.panResponder = _this.getResponder();
    return _this;
  }

  _createClass(VictoryContainer, [{
    key: "getResponder",
    value: function getResponder() {
      var shouldBlockNativeResponder = no;

      if (this.props && (this.props.allowDrag || this.props.allowDraw || this.props.allowResize || this.props.allowSelection || this.props.allowPan || this.props.allowZoom)) {
        shouldBlockNativeResponder = yes;
      }

      return _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: yes,
        onStartShouldSetPanResponderCapture: no,
        onMoveShouldSetPanResponder: yes,
        onMoveShouldSetPanResponderCapture: yes,
        onShouldBlockNativeResponder: shouldBlockNativeResponder,
        onPanResponderTerminationRequest: yes,
        // User has started a touch move
        onPanResponderGrant: this.handleResponderGrant.bind(this),
        // Active touch or touches have moved
        onPanResponderMove: this.handleResponderMove.bind(this),
        // The user has released all touches
        onPanResponderRelease: this.handleResponderEnd.bind(this),
        // Another component has become the responder
        onPanResponderTerminate: this.handleResponderEnd.bind(this)
      });
    }
  }, {
    key: "callOptionalEventCallback",
    value: function callOptionalEventCallback(eventName, evt) {
      var callback = (0, _get2.default)(this.props.events, eventName);

      if (callback) {
        evt.persist(); // RN nativeEvent is reused. see https://fb.me/react-event-pooling

        callback(evt, this.props, "__unknownEventKey__", eventName);
      }
    }
  }, {
    key: "handleResponderGrant",
    value: function handleResponderGrant(evt) {
      if (this.props.onTouchStart) {
        this.props.onTouchStart(evt);
      }

      this.callOptionalEventCallback("onTouchStart", evt);
    }
  }, {
    key: "handleResponderMove",
    value: function handleResponderMove(evt) {
      var touches = evt.nativeEvent.touches;

      if (touches && touches.length === 2) {
        this.callOptionalEventCallback("onTouchPinch", evt);
      } else {
        this.callOptionalEventCallback("onTouchMove", evt);
      }
    }
  }, {
    key: "handleResponderEnd",
    value: function handleResponderEnd(evt) {
      if (this.props.onTouchEnd) {
        this.props.onTouchEnd(evt);
      }

      this.callOptionalEventCallback("onTouchEnd", evt);
    } // Overrides method in victory-core

  }, {
    key: "renderContainer",
    value: function renderContainer(props, svgProps, style) {
      var title = props.title,
          desc = props.desc,
          className = props.className,
          width = props.width,
          height = props.height,
          portalZIndex = props.portalZIndex,
          responsive = props.responsive,
          disableContainerEvents = props.disableContainerEvents;
      var children = this.getChildren(props);
      var dimensions = responsive ? {
        width: "100%",
        height: "100%"
      } : {
        width: width,
        height: height
      };

      var baseStyle = _nativeHelpers.default.getStyle(style, ["width", "height"]);

      var divStyle = Object.assign({}, baseStyle, {
        position: "relative"
      });
      var portalDivStyle = {
        zIndex: portalZIndex,
        position: "absolute",
        top: 0,
        left: 0
      };
      var portalSvgStyle = Object.assign({
        overflow: "visible"
      }, dimensions);
      var portalProps = {
        width: width,
        height: height,
        viewBox: svgProps.viewBox,
        style: portalSvgStyle
      };
      var handlers = disableContainerEvents ? {} : this.panResponder.panHandlers;
      return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({}, handlers, {
        style: divStyle,
        pointerEvents: "box-none",
        className: className,
        ref: props.containerRef
      }, this.getOUIAProps(props)), /*#__PURE__*/_react.default.createElement(_reactNativeSvg.default, _extends({}, svgProps, {
        style: dimensions,
        accessible: props["aria-labelledby"] && title ? true : undefined,
        accessibilityLabel: props["aria-labelledby"] && title ? title : undefined,
        accessibilityHint: props["aria-describedby"] && desc ? desc : undefined
      }), /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Rect, {
        x: 0,
        y: 0,
        width: width,
        height: height,
        fill: "none"
      }), title ? /*#__PURE__*/_react.default.createElement("title", {
        id: "title"
      }, title) : null, desc ? /*#__PURE__*/_react.default.createElement("desc", {
        id: "desc"
      }, desc) : null, children, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: portalDivStyle,
        pointerEvents: "box-none"
      }, /*#__PURE__*/_react.default.createElement(_portal.Portal, _extends({}, portalProps, {
        ref: this.savePortalRef
      })))));
    }
  }]);

  return VictoryContainer;
}(_es.VictoryContainer);

exports.VictoryContainer = VictoryContainer;